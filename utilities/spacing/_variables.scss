/*  =========================================================================
    utilities.spacing.variables
    ========================================================================= */

/*  Use rules
    `@use` everything you need here from other files. Variables, mixins &
    other includes.
    ========================================================================= */

@use '../../settings/defaults';



/*  Variables
    ========================================================================= */

/**
 * The properties that you want to generate spacings for
 * `key` is the classname, `value` is the property name
 *
 * Example
   $properties: (
     'padding': 'padding', // generates `u-padding`
     'margin': 'margin', // generates `u-margin`
   );
 *
 * or
   $properties: (
     'p': 'padding', // generates `u-p`
     'm': 'margin', // generates `u-m`
     'i': 'inset', // generates `u-i`
   );
 * By default it's only margins we generate
 */
$properties: (
  'margin': 'margin',
) !default;


/**
 * In which directions you want your spacings to be generated?
 * `key` is the classname, `value` is the property name
 *
 * Example
   $directions: (
     null: null, // generates `u-margin`
     '-block': '-block-start' '-block-end', // generates `u-margin-block-end` class with start & end properties
     '-block-end': '-block-end', // generates `u-margin-block-end`
     '-inline-start': '-inline-start' // generates `u-margin-inline-start`
   );
 *
 * or
   $directions: (
     '-b-e': '-block-end', // generates `u-m-b-e`
     '-i-s': '-inline-start', // generates `u-m-i-s`
   );
 * By default it's only block-end margins we generate
 */
$directions: (
  '-block-end': '-block-end',
) !default;


/**
 * And which sizes you want to generate?
 * `key` is the classname, `value` is the value (duh!)
 *
 * Example
   $sizes: (
     null: null, // generates `u-margin` with value of `defaults.$space-base`
     '-tiny': defaults.$space-tiny, // generates `u-margin-tiny` with value of `defaults.$space-tiny`
     '-auto': auto // generates `u-margin-auto` with value of `auto`
   );
 *
 * or
   $sizes: (
     '-t': defaults.$space-tiny, // generates `u-m-t` with value of `defaults.$space-tiny`
     '-a': auto // generates `u-m-a` with value of `auto`
   );
 * By default it's only `-base` and `-none` we generate
 */
$sizes: (
  '-base': defaults.$space-base,
  '-none': 0
) !default;


/**
 * Define which namespaced breakpoints you would like to generate for
 * your spacings.
 * All are empty by default, but you can add breakpoints at will.
 *
   $in-breakpoint: (lap, desk);
 *
 * Or
 *
   $in-breakpoint: (
     from: lap,
     until: lap desk,
   );
 *
 * Note: the name of the breakpoint must exist in the list of `$mq-breakpoints`
 *       in `settings/responsive`
 */
$in-breakpoint: () !default;
