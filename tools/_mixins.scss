/*  =========================================================================
    tools.mixins
    ========================================================================= */

/*  Use rules
    `@use` everything you need here from other files. Variables, mixins &
    other includes.
    ========================================================================= */

@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:map';
@use '../settings/defaults';
@use 'functions';
@use 'rem';
@use 'responsive';
@use '../vendor/sass-mq/mq' as sassmq;



/*  Visually-hidden
    Hides an element visually while still allowing the content to be accessible
    to assistive technology, e.g. screen readers.
    Usage: @include visually-hidden();
    ========================================================================= */

@mixin visually-hidden {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  clip-path: inset(50%) !important;
  block-size: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  white-space: nowrap !important;
  inline-size: 1px !important;
}



/*  Font size
    Generates a rem font-size and a baseline-compatible unitless line-height
    from a pixel font-size value. Basic usage is simply:

      @include font-size(18px);

    You can force a specific line-height by passing it as the second argument:

      @include font-size(16px, 1);

    You can also modify the line-height by increments, while staying in the
    baseline grid, by setting the `$modifier` parameter. It takes a positive
    or negative integer, and it will add or remove 'lines' to the  generated
    line-height. This is the recomended way to do it, unless you really need
    an absolute value. i.e.:

      // add 2 lines:
      @include font-size(24px, $modifier: +2);

      // subtract 1 line:
      @include font-size(24px, $modifier: -1);
    ========================================================================= */

@mixin font-size($font-size, $line-height: auto, $modifier: 0, $important: false) {
  @if (meta.type-of($font-size) == number) {
    @if (math.unit($font-size) != 'px') {
      @error '`#{$font-size}` needs to be a pixel value.';
    }
  } @else {
    @error '`#{$font-size}` needs to be a number.';
  }

  @if ($important == true) {
    $important: !important;
  } @else if ($important == false) {
    $important: null;
  } @else {
    @error '`#{$important}` needs to be `true` or `false`.';
  }
  font-size: rem.convert($font-size);

  @if ($line-height == 'auto') {
    // Define how many grid lines each text line should span.
    // By default, we set it to the minimum number of lines necessary
    // in order to contain the defined font-size, +1 for some breathing room.
    // This can be modified with the `$modifier` parameter.
    $lines: math.ceil($font-size / defaults.$baseline) + $modifier + 1;
    $line-height: $lines * defaults.$baseline;
    line-height: ($line-height / $font-size) $important;
  } @else {
    @if (meta.type-of($line-height) == number or $line-height == 'inherit' or $line-height == 'normal') {
      line-height: $line-height $important;
    } @else if ($line-height != 'none' and $line-height != false) {
      @error 'Dâ€™oh! `#{$line-height}` is not a valid value for `$line-height`.';
    }
  }
}



/*  CSS-lock
    Perfect smooth scaling between any 2 values over any viewport range.
    The property will start scaling and stop scaling exactly where you want.

    Basic usage:

      @include css-lock(font-size, 18px, 24px);

    This will scale the property perfectly and smooth from 18px
    on `lap` breakpoint to 24px on `desk` breakpoint.

    You can also redefine the min- and max breakpoints like this:

      @include css-lock(padding, 18px, 24px, desk, wall);

    As per: https://blog.typekit.com/2016/08/17/flexible-typography-with-css-locks/
    ========================================================================= */

@mixin css-lock($property: font-size, $size-min: 16px, $size-max: 20px, $min-bp: lap, $max-bp: desk) {
  @if (math.unit($size-min) == 'px' and math.unit($size-max) == 'px' and math.unit(map.get(defaults.$breakpoints, $min-bp)) == 'px' and math.unit(map.get(defaults.$breakpoints, $max-bp)) == 'px') {
    $size-min-rem: rem.convert($size-min);
    $size-max-rem: rem.convert($size-max);
    #{$property}: $size-min-rem;

    @if ($size-min != $size-max) {
      @include responsive.mq($from: $min-bp) {
        #{$property}: calc(#{$size-min-rem} + #{functions.strip-units($size-max-rem - $size-min-rem)} * ((100vw - #{(rem.convert(map.get(defaults.$breakpoints, $min-bp)))}) / #{functions.strip-units(rem.convert(map.get(defaults.$breakpoints, $max-bp) - map.get(defaults.$breakpoints, $min-bp)))})); // stylelint-disable-line max-line-length
      }

      @include responsive.mq($from: $max-bp) {
        #{$property}: $size-max-rem;
      }
    } @else {
      @warn '$size-min and $size-max are the same, skipping breakpoints';
    }
  } @else {
    @error '$size-min, $size-max, $min-bp and $max-bp should be defined in px.';
  }
}
