/*  =========================================================================
    tools.functions
    ========================================================================= */

/*  Use or forward rules
    ========================================================================= */

@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';

@use '../settings/defaults';



/*  Variables
    ========================================================================= */

$browser-context: defaults.$font-size !default;



/*  Functions
    ========================================================================= */

/**
 * Value to rem
 * Converts a px value to a rem unit based on the current browser context
 */
@function value-to-rem ($value, $warn: true) {
  @if meta.type-of($value) == string or math.is-unitless($value) == true or math.unit($value) != 'px' {
    @if $warn == true {
      @warn 'You’ve passed in a `$value` which is not in the `px` format. I’ve returned your `#{$value}` unmodified.';
    }
    @return $value;
  } @else {
    @return ($value/$browser-context * 1rem);
  }
}


/**
 * A small, internally-used function to remove the units from a given value.
 */
@function strip-units ($number) {
  @return $number / ($number * 0 + 1);
}


/**
 * Find the greatest common factor of two integers
 */
@function greatest-common-factor ($a, $b) {
  @if $b == 0 {
    @return $a;
  } @else {
    @return greatest-common-factor($b, $a % $b);
  }
}


/**
 * Check if a list contains a value
 */
@function list-contains ($list, $value) {
  @if meta.type-of($list) == list {
    @return not not list.index($list, $value);
  } @else {
    @return $list == $value;
  }
}
