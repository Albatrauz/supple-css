/*! supple.tools.mixins | MIT License | github.com/supple-css */

/*  =========================================================================
    tools.mixins
    ========================================================================= */

/*  Rem
    Converts a set of values to rem values
    Usage: @include supple-rem(margin, 0 auto 300px, !important);
    ========================================================================= */

@mixin supple-rem ($property, $value, $append: "") {
  @if type-of($value) == list {
    $all: ();
    @for $i from 1 through length($value) {
      $all: append($all, supple-value-to-rem(nth($value, $i), false));
    }
    #{$property}: $all #{$append};
  } @else {
    #{$property}: supple-value-to-rem($value, false) #{$append};
  }
}



/*  Visually-hidden
    Hides an element visually while still allowing the content to be accessible
    to assistive technology, e.g. screen readers.
    Usage: @include supple-visually-hidden();
    ========================================================================= */

@mixin supple-visually-hidden {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  clip-path: inset(50%) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  white-space: nowrap !important;
  width: 1px !important;
}



/*  Render-module
    Removes the `margin-bottom` from the last childs of a module.
    As per: http://css-tricks.com/spacing-the-bottom-of-modules/
    Usage: @include supple-render-module(4);
    ========================================================================= */


@mixin supple-render-module($depth: 2) {
  $selector-all: "";
  @for $step from 1 through $depth {
    $selector: "";
    @for $i from 1 through $step {
      $selector: $selector + " > *:last-child";
    }
    $selector-all: $selector-all + $selector + ",";
  }

  #{$selector-all} {
    margin-bottom: 0 !important;
  }
}



/*  mq
    A little wrapper around sass-mq which alows us to pass in a string based
    direction instead of direction variable.

    Example usage:
    @include supple-mq(wall, until) {
      outline: 1px solid #ff0000;
    }
    ========================================================================= */

@mixin supple-mq($name, $direction: from) {
  @if (variable-exists(mq-breakpoints) and mixin-exists(mq)) {
    @if ($direction == from) {
      @include mq($from: $name) {
        @content;
      }
    } @else if ($direction == until) {
      @include mq($until: $name) {
        @content;
      }
    } @else {
      @error "#{$direction} is not a valid sass-mq direction";
    }
  } @else {
    @warn $supple-responsive-warning;
  }
}


/*  breakpoint-has
    A little helper mixin to quickly create responsive variants of a certain
    selector.

    Example usage:
    $supple-breakpoint-has-YOURMODULE: (
      from: lap,
      from: desk,
      until: desk,
    );
    @include supple-breakpoint-has($supple-breakpoint-has-YOURMODULE, '.your-selector') {
      outline: 1px solid #ff0000;
    }
    ========================================================================= */

@mixin supple-breakpoint-has($breakpoints, $selector) {
  @if ($breakpoints and $selector) {
    @each $breakpoint in $breakpoints {
      @if ((nth($breakpoint, 1) == "from" or nth($breakpoint, 1) == "until") and nth($breakpoint, 2)) {
        @include supple-mq(nth($breakpoint, 2), nth($breakpoint, 1)) {
          #{$selector}#{$supple-responsive-modifier}#{nth($breakpoint, 1)}-#{nth($breakpoint, 2)} {
            @content;
          }
        }
      } @else {
        @include supple-mq($breakpoint) {
          #{$selector}#{$supple-responsive-modifier}from-#{$breakpoint} {
            @content;
          }
        }
      }
    }
  } @else {
    @error "$breakpoints and $selector arguments are required";
  }
}
