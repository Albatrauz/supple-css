/*  =========================================================================
    tools.mixins
    ========================================================================= */

/*  Rem
    Converts a set of values to rem values
    Usage: @include supple-rem(margin, 0 auto 300px, !important);
    ========================================================================= */

@mixin supple-rem ($property, $value, $append: "") {
  // Provide a fallback for non supporting browsers
  @if $supple-rem-fallback == true {
    #{$property}: $value #{$append};
  }
  @if type-of($value) == list {
    $all: ();
    @for $i from 1 through length($value) {
      $all: append($all, supple-value-to-rem(nth($value, $i), false));
    }
    #{$property}: $all #{$append};
  } @else {
    #{$property}: supple-value-to-rem($value, false) #{$append};
  }
}



/*  Visually-hidden
    Hides an element visually while still allowing the content to be accessible
    to assistive technology, e.g. screen readers.
    Usage: @include supple-visually-hidden();
    ========================================================================= */

@mixin supple-visually-hidden {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  clip-path: inset(50%) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  white-space: nowrap !important;
  width: 1px !important;
}



/*  Render-module
    Removes the `margin-bottom` from the last childs of a module.
    As per: http://css-tricks.com/spacing-the-bottom-of-modules/
    Usage: @include supple-render-module(4);
    ========================================================================= */

@mixin supple-render-module($depth: 2) {
  $selector-all: "";
  @for $step from 1 through $depth {
    $selector: "";
    @for $i from 1 through $step {
      $selector: $selector + " > *:last-child";
    }
    $selector-all: $selector-all + $selector + ",";
  }

  #{$selector-all} {
    margin-bottom: 0 !important;
  }
}



/*  mq
    A little wrapper around sass-mq which alows us to pass in a string based
    direction instead of direction variable.

    Example usage:
    @include supple-mq(wall, until) {
      outline: 1px solid #ff0000;
    }
    ========================================================================= */

@mixin supple-mq($name, $direction: from) {
  @if (variable-exists(mq-breakpoints) and mixin-exists(mq)) {
    @if ($direction == from) {
      @include mq($from: $name) {
        @content;
      }
    } @else if ($direction == until) {
      @include mq($until: $name) {
        @content;
      }
    } @else {
      @error "#{$direction} is not a valid sass-mq direction";
    }
  } @else {
    @warn $supple-responsive-warning;
  }
}


/*  breakpoint-has
    A little helper mixin to quickly create responsive variants of a certain
    selector.

    Example usage:
    $supple-breakpoint-has-YOURMODULE: (
      from: lap,
      from: desk,
      until: desk,
    );
    @include supple-breakpoint-has($supple-breakpoint-has-YOURMODULE, '.your-selector') {
      outline: 1px solid #ff0000;
    }
    ========================================================================= */

@mixin supple-breakpoint-has($breakpoints, $selector) {
  @if ($breakpoints and $selector) {
    @each $breakpoint in $breakpoints {
      @if ((nth($breakpoint, 1) == "from" or nth($breakpoint, 1) == "until") and nth($breakpoint, 2)) {
        @include supple-mq(nth($breakpoint, 2), nth($breakpoint, 1)) {
          #{$selector}#{$supple-responsive-modifier}#{nth($breakpoint, 1)}-#{nth($breakpoint, 2)} {
            @content;
          }
        }
      } @else {
        @include supple-mq($breakpoint) {
          #{$selector}#{$supple-responsive-modifier}from-#{$breakpoint} {
            @content;
          }
        }
      }
    }
  } @else {
    @error "$breakpoints and $selector arguments are required";
  }
}



/*  Font size
    Generates a rem font-size and a baseline-compatible unitless line-height
    from a pixel font-size value. Basic usage is simply:

      @include supple-font-size(18px);

    You can force a specific line-height by passing it as the second argument:

      @include supple-font-size(16px, 1);

    You can also modify the line-height by increments, while staying in the
    baseline grid, by setting the `$modifier` parameter. It takes a positive
    or negative integer, and it will add or remove "lines" to the  generated
    line-height. This is the recomended way to do it, unless you really need
    an absolute value. i.e.:

      // add 2 lines:
      @include supple-font-size(24px, $modifier: +2);

      // subtract 1 line:
      @include supple-font-size(24px, $modifier: -1);
    ========================================================================= */

@mixin supple-font-size($font-size, $line-height: auto, $modifier: 0, $important: false) {
  @if (type-of($font-size) == number) {
    @if (unit($font-size) != "px") {
      @error "`#{$font-size}` needs to be a pixel value.";
    }
  } @else {
    @error "`#{$font-size}` needs to be a number.";
  }

  @if ($important == true) {
    $important: !important;
  } @else if ($important == false) {
    $important: null;
  } @else {
    @error "`#{$important}` needs to be `true` or `false`.";
  }

  @include supple-rem(font-size, $font-size);

  @if ($line-height == "auto") {
    // Define how many grid lines each text line should span.
    // By default, we set it to the minimum number of lines necessary
    // in order to contain the defined font-size, +1 for some breathing room.
    // This can be modified with the `$modifier` parameter.
    $lines: ceil($font-size / $supple-baseline) + $modifier + 1;
    $line-height: $lines * $supple-baseline;
    line-height: ($line-height / $font-size) $important;
  } @else {
    @if (type-of($line-height) == number or $line-height == "inherit" or $line-height == "normal") {
      line-height: $line-height $important;
    } @else if ($line-height != "none" and $line-height != false) {
      @error "Dâ€™oh! `#{$line-height}` is not a valid value for `$line-height`.";
    }
  }
}
