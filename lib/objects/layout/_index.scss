/*  =========================================================================
    objects.layout
    Fluid and nestable layout system based on flexbox.
    ========================================================================= */

/*  Use rules
    `@use` everything you need here from other files. Variables, mixins &
    other includes.
    ========================================================================= */

/**
 * Forward the variables to the parent stylesheet
 */
@forward './variables';


/**
 * Use the settings & tools in this sheet
 */
@use './variables';
@use './tools';



/*  Module code
    ========================================================================= */

/**
 * All content must be contained within child `layout__cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 */
.o-layout {
  --o-layout-columns: 12;
  --o-layout-colspan: var(--o-layout-columns);
  display: flex;
  flex-flow: row wrap;
  padding: 0; /* [1] */
  margin-inline-start: 0; /* [1] */
  list-style: none; /* [1] */
}


/**
 * Element: cell
 * No explicit width by default. Rely on combining `layout__cell` with a dimension
 * utility or a component class that extends 'layout'.
 *
 * 1. Set flex items to full width by default
 * 2. Fix issue where elements with overflow extend past the
 *    `layout__cell` container
 */
.o-layout__cell {
  flex-basis: calc(100% / var(--o-layout-columns) * var(--o-layout-colspan)); /* [1] */
  min-inline-size: 0; /* [2] */
}

/**
 * Element modifier: align-inline-center
 * horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `layout` object.
 */
.o-layout__cell--align-inline-center {
  margin-inline-start: auto;
  margin-inline-end: auto;
}


/**
 * Element modifier: fit
 * Make a cell shrink wrap its content.
 */
.o-layout__cell--fit {
  @include tools.fit;
}


/**
 * Element modifier: fill
 * Make a cell fill the remaining space.
 */
.o-layout__cell--fill {
  @include tools.fill;
}


/**
 * Modifier: inline-center
 * center align all layout cells
 */
.o-layout--align-inline-center {
  justify-content: center;
}


/**
 * Modifier: align-inline-end
 * right align all layout cells
 */
.o-layout--align-inline-end {
  justify-content: flex-end;
}


/**
 * Modifier: align-block-center
 * center-align layout cells on the block axis
 */
.o-layout--align-block-center {
  align-items: center;
}


/**
 * Modifier: align-block-end
 * end-align layout cells on the block axis
 */
.o-layout--align-block-end {
  align-items: flex-end;
}


/**
 * Modifier: reverse
 * reverse all cells
 */
.o-layout--reverse {
  flex-direction: row-reverse;
}


/**
 * Modifier: fit
 * allow cells to equal distribute width
 */
.o-layout--fit {
  > .o-layout__cell {
    flex: 1;
  }
}


/**
 * Modifier: equal-block-size
 * All cells match the size of tallest cell in a row
 * 1. The direct child of the flexbox must be a single element when you want
 *    to use equal-block-size
 */
.o-layout--equal-block-size {
  > .o-layout__cell {
    display: flex;

    > * {
      inline-size: 100%; /* [1] */
    }
  }
}


/**
 * Modifier: gap-base
 * Gap-base
 */
.o-layout--gap-base {
  @include tools.mixins-rem(margin-inline-start, -(variables.$gap-base));

  > .o-layout__cell {
    @include tools.mixins-rem(padding-inline-start, variables.$gap-base);
  }
}


/**
 * Modifier: gap-tiny
 * Tiny gap
 */
.o-layout--gap-tiny {
  @include tools.mixins-rem(margin-inline-start, -(variables.$gap-tiny));

  > .o-layout__cell {
    @include tools.mixins-rem(padding-inline-start, variables.$gap-tiny);
  }
}


/**
 * Modifier: gap-small
 * Small gap
 */
.o-layout--gap-small {
  @include tools.mixins-rem(margin-inline-start, -(variables.$gap-small));

  > .o-layout__cell {
    @include tools.mixins-rem(padding-inline-start, variables.$gap-small);
  }
}

/**
 * Modifier: gap-large
 * Large gap
 */
.o-layout--gap-large {
  @include tools.mixins-rem(margin-inline-start, -(variables.$gap-large));

  > .o-layout__cell {
    @include tools.mixins-rem(padding-inline-start, variables.$gap-large);
  }
}

/**
 * Modifier: gap-huge
 * Huge gap
 */
.o-layout--gap-huge {
  @include tools.mixins-rem(margin-inline-start, -(variables.$gap-huge));

  > .o-layout__cell {
    @include tools.mixins-rem(padding-inline-start, variables.$gap-huge);
  }
}



/*  Responsive fitters & fillers
    ========================================================================= */

@include tools.mixins-breakpoint-has(variables.$fit-in-breakpoint, '.o-layout__cell--fit') {
  @include tools.fit;
}

@include tools.mixins-breakpoint-has(variables.$fill-in-breakpoint, '.o-layout__cell--fill') {
  @include tools.fill;
}
