/*  =========================================================================
    objects.flexembed
    For use with multi-media embeds, such as videos or slideshows, that need to
    retain a specific aspect ratio but adapt to elements of variable widths.
    ========================================================================= */

/*  Use rules
    `@use` everything you need here from other files. Variables, mixins &
    other includes.
    ========================================================================= */

/**
 * Forward the variables to the parent stylesheet
 */
@forward './variables';


/**
 * Use the settings & tools in this sheet
 */
@use 'sass:meta';
@use './variables';
@use '../../tools';



/*  Module
    ========================================================================= */

/**
 * 1. Default cropping is a perfect square, in you own modules you can override
 *    the ratio like this: (16/9)
 */
.o-flexembed {
  --o-flexembed-ratio: (1/1); /* [1] */
  position: relative;
  display: block;
  height: 0;
  padding: 0 0 calc(100% / var(--o-flexembed-ratio));
  overflow: hidden;
  @include tools.mixins-rem(margin-bottom, variables.$space);
}

/**
 * The actual embed/item
 */
.o-flexembed__item,
.o-flexembed > iframe,
.o-flexembed > embed,
.o-flexembed > object {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}



/*  Common ratio modifiers, for use in browsers without
    custom-property support
    ========================================================================= */

@each $ratio in variables.$ratios {
  @each $a, $b in $ratio {
    @if (meta.type-of($a) != number or meta.type-of($b) != number) {
      @error '`#{$a}` and `#{$b}` need to be numbers.';
    }

    .o-flexembed--#{$a}by#{$b} {
      padding-bottom: 100% / ($a/$b);
    }
  }
}
