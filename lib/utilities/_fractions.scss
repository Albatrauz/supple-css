/*  =========================================================================
    utilities.fractions
    Sizes in human readable format. These are used in conjunction with other
    objects and abstractions found in supple, most commonly the layout system
    and tables
    ========================================================================= */

/*  Use rules
    `@use` everything you need here from other files. Variables, mixins &
    other includes.
    ========================================================================= */

@use 'sass:meta';
@use 'sass:math';
@use 'sass:list';
@use '../settings/defaults';
@use '../tools/mixins';
@use '../tools/functions';
@use '../../node_modules/sass-mq/mq' as sassmq;



/*  Variables
    Variables used in this module
    ========================================================================= */

/**
 * Fractions, makes it easy to create several proportional
 * dimensions (e.g., both a 2-part and a 12-part grid).
 *
 * For example, `2 4 6 12` will let you use the u-fraction-1-2, u-fraction-2-4,
 * fraction-3-6, and fraction-6-12 classes to specify that an element should
 * take up 50% of its container.
 */
$fractions: 12 !default;


/**
 * Define which namespaced breakpoints you would like to generate for each
 * of the fractions. It allows you to only compile as much CSS as you need.
 * All are empty by default, but you can add breakpoints at will.
 *
 * $breakpoint-has-fractions: (lap, desk);
 *
 * Or
 *
 * $breakpoint-has-fractions: (
 *   from: lap,
 *   until: lap desk,
 * );
 *
 * Note: the name of the breakpoint must exist in the list of `$mq-breakpoints`
 *       in `settings/responsive`
 */
$breakpoint-has-fractions: () !default;


/**
 * You can rename the fraction name & delimiter to your liking
 */
$fractions-name-fraction: fraction !default;
$fractions-delimiter: 'of' !default;



/*  Functions/Mixins
    Functions and/or mixins used in this module
    ========================================================================= */

/**
 * Fluid units
 * USAGE: provide a space-separated list of integers, each of which
 * represents the number of fractions that make up a unit component.
 * Optionally provide a modifier suffix that can be used to adjust
 * grids in different contexts (e.g. viewport dimensions).
 */

/* stylelint-disable max-nesting-depth */
@mixin fractions-build ($units, $modifier: '') {
  /**
   * Proportional fractions
   * Specify the proportional width of an object.
   * Primarily for, but not limited to, use with `.grid__cell` components.
   * Intentional redundancy build into each set of unit classes.
   */
  @each $denominator in $units {
    @for $numerator from 1 through $denominator {
      // Initialize variables
      $numerator-r: 0;
      $denominator-r: 0;

      // Find the greatest common factor
      $gcf: functions.greatest-common-factor($numerator, $denominator);

      @if $gcf > 1 {
        // Reduced value of $numerator
        $numerator-r: $numerator/$gcf;
        // Reduced value of $denominator
        $denominator-r: $denominator/$gcf;
      }

      // Check if the reduced value of $denominator-r was also supplied in the
      // list of units to be built
      $canreduce: functions.list-contains($units, $denominator-r);

      /**
       * Create units based on fractions
       * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
       */
      .u-#{$fractions-name-fraction}--#{$numerator}#{$fractions-delimiter}#{$denominator}#{$modifier} {
        @if $canreduce {
          // stylelint-disable-next-line scss/at-extend-no-missing-placeholder
          @extend .u-#{$fractions-name-fraction}--#{$numerator-r}#{$fractions-delimiter}#{$denominator-r}#{$modifier};
        } @else {
          flex-basis: auto !important; /* [1] */
          width: math.percentage($numerator / $denominator) !important;
        }
      }
    }
  }
}

/* stylelint-enable max-nesting-depth */



/*  Dimensions core
    ========================================================================= */

/**
 * Setup generic fractions
 */
@include fractions-build($fractions);



/*  Responsive
    ========================================================================= */

@each $breakpoint in $breakpoint-has-fractions {
  @if ((list.nth($breakpoint, 1) == 'from' or list.nth($breakpoint, 1) == 'until') and list.nth($breakpoint, 2)) {
    @if type-of(list.nth($breakpoint, 2)) == 'list' {
      @each $point in list.nth($breakpoint, 2) {
        @include mixins.supple-mq($point, list.nth($breakpoint, 1)) {
          @include fractions-build($fractions, '#{defaults.$responsive-modifier}#{list.nth($breakpoint, 1)}-#{$point}');
        }
      }
    } @else {
      @include mixins.supple-mq(list.nth($breakpoint, 2), list.nth($breakpoint, 1)) {
        @include fractions-build($fractions, '#{defaults.$responsive-modifier}#{list.nth($breakpoint, 1)}-#{list.nth($breakpoint, 2)}');
      }
    }
  } @else {
    @include mixins.supple-mq($breakpoint) {
      @include fractions-build($fractions, '#{defaults.$responsive-modifier}from-#{$breakpoint}');
    }
  }
}
