/*  =========================================================================
    utilities.spacing
    Utility classes to put specific spacing values onto elements.
    ========================================================================= */

/*  Use or forward rules
    ========================================================================= */

@use 'sass:list';
@use 'sass:meta';
@use '../settings/defaults';
@use '../tools/mixins';



/*  Variables
    ========================================================================= */

/**
 * The properties that you want to generate spacings for
 * `key` is the classname, `value` is the property name
 */
$spacing-properties: (
  'padding': 'padding',
  'margin': 'margin',
) !default;


/**
 * In which directions you want your spacings to be generated?
 * `key` is the classname, `value` is the property name
 */
$spacing-directions: (
  null: null,
  '-top': '-top',
  '-right': '-right',
  '-bottom': '-bottom',
  '-left': '-left',
) !default;


/**
 * And which sizes you want to generate?
 * `key` is the classname, `value` is the value (duh!)
 */
$spacing-sizes: (
  null: defaults.$space-base,
  '-base': defaults.$space-base,
  '-tiny': defaults.$space-tiny,
  '-small': defaults.$space-small,
  '-large': defaults.$space-large,
  '-huge': defaults.$space-huge,
  '-auto': auto,
  '-none': 0
) !default;


/**
 * Define which namespaced breakpoints you would like to generate for
 * your spacings.
 * All are empty by default, but you can add breakpoints at will.
 *
 * $breakpoint-has-spacing: (lap, desk);
 *
 * Or
 *
 * $breakpoint-has-spacing: (
 *   from: lap,
 *   until: lap desk,
 * );
 *
 * Note: the name of the breakpoint must exist in the list of `$mq-breakpoints`
 *       in `settings/responsive`
 */
$breakpoint-has-spacing: () !default;



/*  Functions/Mixins
    ========================================================================= */

@mixin render-spacings($modifier: '') {
  @each $property-namespace, $property in $spacing-properties {
    @each $direction-namespace, $direction-rules in $spacing-directions {
      @each $size-namespace, $size in $spacing-sizes {
        .u-#{$property-namespace}#{$direction-namespace}#{$size-namespace}#{$modifier} {
          @each $direction in $direction-rules {
            @include mixins.rem(#{$property}#{$direction}, $size, !important);
          }
        }
      }
    }
  }
}



/*  Module
    ========================================================================= */

@include render-spacings();



/*  Responsive
    ========================================================================= */

@each $breakpoint in $breakpoint-has-spacing {
  @if ((list.nth($breakpoint, 1) == 'from' or list.nth($breakpoint, 1) == 'until') and list.nth($breakpoint, 2)) {
    @if meta.type-of(list.nth($breakpoint, 2)) == 'list' {
      @each $point in list.nth($breakpoint, 2) {
        @include mixins.supple-mq($point, list.nth($breakpoint, 1)) {
          @include render-spacings('#{defaults.$responsive-modifier}#{list.nth($breakpoint, 1)}-#{$point}');
        }
      }
    } @else {
      @include mixins.supple-mq(list.nth($breakpoint, 2), list.nth($breakpoint, 1)) {
        @include render-spacings('#{defaults.$responsive-modifier}#{list.nth($breakpoint, 1)}-#{list.nth($breakpoint, 2)}');
      }
    }
  } @else {
    @include mixins.supple-mq($breakpoint) {
      @include render-spacings('#{defaults.$responsive-modifier}from-#{$breakpoint}');
    }
  }
}
