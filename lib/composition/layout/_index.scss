/*  =========================================================================
    composition.layout
    Fluid and nestable layout system based on flexbox.
    ========================================================================= */

/*  Use rules
    `@use` everything you need here from other files. Variables, mixins &
    other includes.
    ========================================================================= */

/**
 * Forward the variables to the parent stylesheet
 */
@forward './variables';


/**
 * Use the settings & tools in this sheet
 */
@use './variables';
@use '../../tools';



/*  Module code
    ========================================================================= */

/**
 * All content must be contained within child `layout__cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 */
.c-layout {
  --columns: #{variables.$columns};
  --gap: 0;
  display: flex;
  flex-flow: row wrap;
  padding: 0; /* [1] */
  margin-inline-start: calc(-1 * var(--gap)); /* [1] */
  list-style: none; /* [1] */
}


/**
 * Element: cell
 * No explicit width by default. Rely on combining `layout__cell` with a dimension
 * utility or a component class that extends 'layout'.
 *
 * 1. Set flex items to full width by default
 * 2. Fix issue where elements with overflow extend past the
 *    `layout__cell` container. As per:
 *    http://weblog.west-wind.com/posts/2016/Feb/15/Flexbox-Containers-PRE-tags-and-managing-Overflow
 */
.c-layout__cell {
  --colspan: var(--columns);
  flex-basis: calc(100% / var(--columns) * var(--colspan)); /* [1] */
  min-inline-size: 0; /* [2] */
  padding-inline-start: var(--gap);
}

/**
 * Element modifier: align-inline-center
 * center one cell on the inline axis
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `layout` composition.
 */
.c-layout__cell--align-inline-center {
  margin-inline-start: auto;
  margin-inline-end: auto;
}


/**
 * Element modifier: fit
 * Make a cell shrink wrap its content.
 */
.c-layout__cell--fit {
  flex-basis: auto;
}


/**
 * Element modifier: fill
 * Make a cell fill the remaining space.
 *
 * 1. Fixes issue where a element doesn’t fill the remaining space when the
 *    container has no explicit width.
 */
.c-layout__cell--fill {
  flex: auto;
  inline-size: 0%; /* [1] */
}


/**
 * Modifier: inline-center
 * center align all layout cells over the inline axis
 */
.c-layout--align-inline-center {
  justify-content: center;
}


/**
 * Modifier: align-inline-end
 * align all layout cells to the end of the inline axis
 */
.c-layout--align-inline-end {
  justify-content: flex-end;
}


/**
 * Modifier: align-block-center
 * center-align layout cells on the block axis
 */
.c-layout--align-block-center {
  align-items: center;
}


/**
 * Modifier: align-block-end
 * end-align layout cells on the block axis
 */
.c-layout--align-block-end {
  align-items: flex-end;
}


/**
 * Modifier: reverse
 * reverse all cells
 */
.c-layout--reverse {
  flex-direction: row-reverse;
}


/**
 * Modifier: fill
 * allow cells to equal distribute width
 */
.c-layout--fill {
  > .c-layout__cell {
    flex: 1;
  }
}

/**
 * Modifier: fit
 * fit all cells to their content
 */
.c-layout--fit {
  > .c-layout__cell {
    flex-basis: auto;
  }
}


/**
 * Modifier: stretch
 * All cells match the size of tallest cell in a row
 * 1. The direct child of the layout__cell must be a single element when you want
 *    to use stretch
 */
.c-layout--stretch {
  > .c-layout__cell {
    display: flex;

    > * {
      inline-size: 100%; /* [1] */
    }
  }
}


/**
 * Modifier: gap-X
 */
@each $key, $value in variables.$gaps {
  .c-layout--gap-#{$key} {
    --gap: #{tools.functions-value-to-rem($value)};
  }
}


/*  Responsive fitters & fillers
    ========================================================================= */

/**
 * Element modifier: fit
 * Make a cell shrink wrap its content.
 */
@include tools.mixins-in-breakpoint(variables.$fit-in-breakpoint, '.c-layout__cell--fit') {
  flex-basis: auto;
}


/**
 * Element modifier: fill
 * Make a cell fill the remaining space.
 *
 * 1. Fixes issue where a element doesn’t fill the remaining space when the
 *    container has no explicit width.
 */
@include tools.mixins-in-breakpoint(variables.$fill-in-breakpoint, '.c-layout__cell--fill') {
  flex: auto;
  inline-size: 0%; /* [1] */
}
